const timeoutPromise = (ms, value) => new Promise(resolve => setTimeout(() => resolve(value), ms));
apple

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);

const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
const squareRoot = num => Math.sqrt(num);
orange

const randomNumber = getRandomNumber();
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const deepClone = obj => JSON.parse(JSON.stringify(obj));

const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;
false / orange
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };

for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

79 - false
const findAverage = numbers => numbers.reduce((sum, num) => sum + num, 0) / numbers.length;

